#Ratkaisuni CSES Problem set tehtävään "Weird Algorithm":
#include <iostream>
using namespace std;
int main() {
	long long n;
	cin >> n; 
	while (n>1)
	{
		cout << n << " ";
		if (n % 2 == 0) {
			n /= 2;
		}
		else {
			n = 3*n + 1;
		}
	}
	cout << "1";
 

#Ratkaisuni CSES Problem set tehtävään "Increasing Array":

#include <iostream>
using namespace std;
int main() {
	long long n, sum;
	sum = 0;
	cin >> n;
	long long g[9999999];
	for (int i = 0; i < n; i++) {
		cin >> g[i];
		if (i > 0 && g[i - 1] > g[i]) {
			sum += g[i - 1] - g[i];
			g[i] += g[i - 1] - g[i];
		}
	}
	cout << sum;

#Ratkaisuni CSES Problem set tehtävään "Two Sets":
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
 
using namespace std;
long long arruys[1000000 + 1];
set<long long> mrNumbers;
set<long long> mrNumbers2;
bool found;
int main() {
	long long n, sum;
	sum = 0;
	
	cin >> n;
	for (int i = 0; i < n; i++) {
		arruys[i] = i+1;
		sum += i+1;
		mrNumbers2.insert(i+1);
	}
	//cout << "Lukujen summa: " << sum<< endl;
	if (sum % 2 == 0) {
		long long fill = sum / 2;
		long long measuring = 0;
		//cout << endl <<"Trying to fill: " << fill << endl;
		for (int i = n-1; i >= 0; i--) {
			
			//cout << endl<< "Arrays value " << i << " equals " << arruys[i] << endl;
			if (arruys[i] + measuring <= fill) {
				mrNumbers.insert(arruys[i]);
				mrNumbers2.erase(arruys[i]);
				measuring += arruys[i];
				if (measuring == fill) {
					found = true;
					break;
				}
			}
		}
 
 
	}
	if (found == true) {
		cout << "YES";
		cout << endl << mrNumbers.size() << endl;
		for (auto it = mrNumbers.begin(); it != mrNumbers.end(); it++) {
			cout << *it << " ";
		}
		cout << endl << mrNumbers2.size() << endl;
		for (auto it = mrNumbers2.begin(); it != mrNumbers2.end(); it++) {
			cout << *it << " ";
		}
	}
	else {
		cout << "NO";
	}
	return 0;

#Ratkaisuni CSES Problem set tehtävään "Collecting Numbers":
#include <iostream>
#include <vector>
using namespace std;
int main() {
	int n, max, last; int rounds = 0;
	cin >> n;
	vector<int> index(n+1);
	vector<int> numbers(n+1);
	for (int i = 0; i < n; i++) {
		cin >> numbers[i];
	}
	for (int i = 0; i < n; i++) {
		index[numbers[i]] = i; 
	}
	last = 1;
	for (int i = 2; i < n+1; i++) {
		//cout << "Comparing the indicies of " << last << " and " << i << endl;
		if (index[last] > index[i]) {
			rounds++;
			//cout << "\nIndex of " << last << ": " << index[last];
			//cout << "\nIndex of " << i << ": " << index[i];
			//cout << "\n\nThe index of number " << last << " is larger than the index of number " << i;
			//cout << "\nRounds: " << rounds<< endl;
		}
		last = i;
	}
	cout << rounds+1;

#Ratkaisuni CSES Problem set tehtävään "Creating Strings":
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm>
using namespace std;
int fact(int input) {
	int length = input;
	for (int i = 1; i < length; i++) { input *= length - i; }
	return input;
}
 
 
 
int main() {
	string n; cin >> n;
	int l, r; l = n.length();
	int chCount[26] = { 0 };
	vector<int> moreLetters;
	for (char ch : n) {
		chCount[ch-'a']++;
	}
	for (int i = 0; i < 26; ++i) {
		if (chCount[i] > 1) { // If the count is greater than 1, it's repeated
			moreLetters.push_back(chCount[i]);
		}
	}
	//cout << "Same characters in string: " << trueCount << endl;
	r = fact(l);
	for (int i = 0; i < moreLetters.size(); i++) {
		r /= fact(moreLetters[i]);
	}
	sort(n.begin(), n.end());
	cout << r;
	cout << endl << n << endl;
	while (next_permutation(n.begin(), n.end())) {
		cout << n << endl;
	}

#Ratkaisuni CSES Problem set tehtävään "Movie Festival":
#include <iostream> 
#include <vector> 
#include <algorithm>
using namespace std;
int main() {
	long long n; cin >> n;
	vector<pair<int, int>> movieTimes(n);
	for (int i = 0; i < n; i++) { cin >> movieTimes[i].second >> movieTimes[i].first; }
	sort(movieTimes.begin(), movieTimes.end());
	long long count = 0; long long beingWatched = 0;
	for (int i = 0; i < n-1; i++) {
		if (movieTimes[beingWatched].first <= movieTimes[i + 1].second) {
			count++;
			beingWatched = i + 1;
		}
	}
	cout << 1+count;
}

#Ratkaisuni CSES Problem set tehtävään "Missing Coin Sum":
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main() {
	long long n; cin >> n;
	vector<long long> coins(n);
	for (int i = 0; i < n; i++) {
		cin >> coins[i];
	}
	sort(coins.begin(), coins.end());
	
	long long maxAchieve = 1;
	for (int i = 0; i < n; i++) {
		//cout << "\n\nCurrent maxAchieve: " << maxAchieve << endl;
		//cout << "Current Coin: " << coins[i] << endl;
		//cout << "Coins[i]: " << coins[i] << " <= " << maxAchieve << "<-maxAchieve." << endl;
		if (coins[i] <= maxAchieve) {
			//cout << "maxAchieve: " << maxAchieve << "+= " << coins[i] << "<-coins[i]" << endl;
			maxAchieve += coins[i];
		}
		else {
			break;
		}
	}
	cout << maxAchieve;
}


#Ratkaisuni CSES Problem set tehtävään "Josephus Problem I":
#include <iostream>
#include <vector>
using namespace std;
 
int main() {
	long long n; cin >> n;
	long long a=1, b=0;
	while (n > 0) {
		for (int i = 2; i <= n; i += 2) {
			cout << a*i+b<< " ";
		}
		if (n % 2 == 1) {
			cout << a + b << " ";
			b += a;
		}
		else {
			b -= a;
		}
		a *= 2;
		n /= 2;
	}
}
#Ratkaisuni CSES Problem set tehtävään "Concert Tickets":
#include <iostream>
#include <string>
#include <set>
using namespace std;
int main() {
	multiset<long long> tickets;
	long long n, m; cin >> n >> m; // n = ticket count, m = customer count
	long long temp;
	for (int i = 0; i < n; i++) {
		cin >> temp;
		tickets.insert(temp);
	}
	for (int i = 0; i < m; i++) {
		cin >> temp;
		auto itr = tickets.upper_bound(temp);
		if (itr == tickets.begin()) {
			cout << "-1\n";
		}
		else {
			itr--;
			cout << *itr << "\n";
			tickets.erase(itr);
		}
	} 
}
#Ratkaisuni CSES Problem set tehtävään "Room Allocation":
#include <iostream>
#include <algorithm>
#include <tuple>
#include <queue>
#include <vector>
using namespace std;
 
int main() {
	long long n; cin >> n;
	vector<tuple<long long, long long, long long>> timeSheet(n);
	priority_queue<pair<int, int>> departures;
	vector <pair<long long, long long>> output;
	for (int i = 0; i < n; i++) {
		cin >> get<0>(timeSheet[i]) >> get<1>(timeSheet[i]);
		get<2>(timeSheet[i]) = i; // store index 
	}
	sort(timeSheet.begin(), timeSheet.end());
	long long roomIndex = 1;
	long long roomsNeeded = 0;
	for (int i = 0; i < n; i++) {
		if (departures.empty() == true || get<0>(timeSheet[i]) <= -departures.top().first) {
			roomsNeeded += 1;
			output.push_back({ get<2>(timeSheet[i]), roomsNeeded });
			departures.push({ -get<1>(timeSheet[i]), roomsNeeded });
		}
		else {
			roomIndex = departures.top().second;
			departures.pop();
			departures.push({ -get<1>(timeSheet[i]), roomIndex });
			output.push_back({ get<2>(timeSheet[i]), roomIndex });
		}
 
	}
 
 
	std::cout << roomsNeeded << endl;
	sort(output.begin(), output.end());
	for (int i = 0; i < output.size(); i++) {
		std::cout << output[i].second << " ";
	}
 
}
#Ratkaisuni CSES Problem set tehtävään "Subarray Distinct Values":
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;
int main() {
	long long n, k; cin >> n >> k;
	vector<long long> input(n + 2);
	for (int i = 0; i < n; i++) {
		cin >> input[i];
	}
	map<long long, long long> map;
	long long l = 0, r = 1, dif = 1;
	long long answ = 1;
	map[input[l]]++; // add the leftmost item to the map
	while (r<n)
	{
		if (map[input[r]] <= 0) { dif++; } // check if dif 
		map[input[r]]++;
		while (dif > k) { 
			map[input[l]]--;
			if (map[input[l]] <= 0) { 
				dif--; 
			} // check if the value freed by left iterator decreased the amount of different numbers in dif
			l++;
		}
		answ += r - l + 1;
		r++;
	}
	cout << answ;
}
#Ratkaisuni CSES Problem set tehtävään "Josephus Problem II":
#include <bits/stdc++.h>
using namespace std;
 
using namespace std;
#define ll long long
#define mod 1000000007
 
int main()
{
    long long n, k; cin >> n >> k;
    vector<vector<int> > arr;
 
    int root = sqrt(n);
    int row = 0, col = 0, count = 0;
    vector<int> vec;
    for (int i = 1; i <= n; i++) {
        if (count > root) {
            count = 0;
            arr.push_back(vec);
            vec.clear();
        }
        vec.push_back(i);
        count++;
    }
    if (!vec.empty())
        arr.push_back(vec);
    for (int i = 0; i < n; i++) {
        int j = k % (n - i);
 
        while (j) {
            if (col + j < arr[row].size()) {
                col += j;
                j = 0;
            }
            else {
                j -= arr[row].size() - col;
                col = 0;
                row++;
            }
            if (row >= arr.size())
                row = 0;
        }
        while (arr[row].size() <= col) {
            col = 0;
            row++;
            if (row >= arr.size())
                row = 0;
        }
        cout << arr[row][col] << " ";
        if (i != n - 1) {
            arr[row].erase(arr[row].begin() + col);
            while (arr[row].size() <= col) {
                col = 0;
                row++;
                if (row >= arr.size())
                    row = 0;
            }
        }
    }
 
    return 0;
}
